1:"$Sreact.fragment"
2:I[1362,["747","static/chunks/747-75ee5d190a01c731.js","598","static/chunks/598-d6b444c04c4bc02e.js","177","static/chunks/app/layout-f9070ac58b9f596a.js"],"ThemeProvider"]
3:I[2243,["747","static/chunks/747-75ee5d190a01c731.js","598","static/chunks/598-d6b444c04c4bc02e.js","177","static/chunks/app/layout-f9070ac58b9f596a.js"],"Header"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[6874,["747","static/chunks/747-75ee5d190a01c731.js","598","static/chunks/598-d6b444c04c4bc02e.js","530","static/chunks/app/posts/page-c39defde20d828ac.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/blog-next/_next/static/css/255aa8a21c99457f.css","style"]
0:{"P":null,"b":"BmHkKRLArxW_ESfvYHuhw","p":"/blog-next","c":["","posts","React","useMemo-interview",""],"i":false,"f":[[["",{"children":["posts",{"children":[["slug","React/useMemo-interview","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/blog-next/_next/static/css/255aa8a21c99457f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"zh-TW","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","title",null,{"children":"前端技術學習筆記"}],["$","meta",null,{"name":"description","content":"記錄前端技術學習過程中的心得與技巧，包含 JavaScript、React、Webpack 等主題"}],["$","link",null,{"rel":"icon","href":"/favicon.ico"}]]}],["$","body",null,{"className":"min-h-screen flex flex-col","children":["$","$L2",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":[["$","$L3",null,{}],["$","main",null,{"className":"flex-1","children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","div",null,{"className":"flex flex-col items-center justify-center min-h-[70vh] text-center px-4","children":["$","div",null,{"className":"space-y-5","children":[["$","h1",null,{"className":"text-9xl font-extrabold tracking-widest bg-clip-text text-transparent bg-gradient-to-r from-purple-500 to-pink-500 animate-pulse","children":"404"}],["$","h2",null,{"className":"text-3xl md:text-4xl font-bold mt-8 mb-4","children":"糟糕！頁面迷路了"}],["$","p",null,{"className":"text-muted-foreground text-lg mb-8 max-w-md mx-auto","children":"看起來你正在尋找的頁面已經消失在數位宇宙中，或者它從未存在過。"}],["$","div",null,{"className":"mt-8","children":["$","$L6",null,{"href":"/","className":"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/90 h-10 rounded-md px-6 has-[>svg]:px-4 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white","children":"返回首頁"}]}],["$","div",null,{"className":"mt-16 max-w-md mx-auto","children":["$","div",null,{"className":"w-full h-24 border-4 border-dashed border-gray-300 rounded-lg flex items-center justify-center relative overflow-hidden","children":[["$","div",null,{"className":"absolute w-8 h-8 bg-purple-500 rounded-full left-0 animate-bounce-horizontal"}],["$","p",null,{"className":"text-muted-foreground","children":"正在搜尋您的頁面..."}]]}]}]]}]}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}],["$","footer",null,{"className":"border-t bg-background","children":["$","div",null,{"className":"container py-8 px-4 md:px-6","children":[["$","div",null,{"className":"grid grid-cols-1 md:grid-cols-4 gap-8","children":[["$","div",null,{"className":"col-span-1 md:col-span-2","children":[["$","$L6",null,{"href":"/","className":"text-xl font-bold mb-4 block","children":"前端學習筆記"}],["$","p",null,{"className":"text-muted-foreground text-sm max-w-xs","children":"記錄前端技術學習過程中的心得與技巧，包含 JavaScript、React、Webpack 等主題"}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium mb-4","children":"導航"}],["$","ul",null,{"className":"space-y-2","children":[["$","li",null,{"children":["$","$L6",null,{"href":"/","className":"text-muted-foreground text-sm hover:text-primary transition-colors","children":"首頁"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/posts","className":"text-muted-foreground text-sm hover:text-primary transition-colors","children":"文章"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/categories","className":"text-muted-foreground text-sm hover:text-primary transition-colors","children":"分類"}]}],["$","li",null,{"children":["$","$L6",null,{"href":"/about","className":"text-muted-foreground text-sm hover:text-primary transition-colors","children":"關於"}]}]]}]]}],["$","div",null,{"children":[["$","h3",null,{"className":"font-medium mb-4","children":"社交媒體"}],["$","ul",null,{"className":"space-y-2","children":["$","li",null,{"children":["$","$L6",null,{"href":"https://github.com/supermanko1102","target":"_blank","rel":"noreferrer","className":"flex items-center gap-2 text-muted-foreground text-sm hover:text-primary transition-colors","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-github h-4 w-4","aria-hidden":"true","children":[["$","path","tonef",{"d":"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"}],["$","path","9comsn",{"d":"M9 18c-4.51 2-5-2-7-2"}],"$undefined"]}],["$","span",null,{"children":"GitHub"}]]}]}]}]]}]]}],["$","div",null,{"className":"mt-8 pt-8 border-t text-center","children":["$","p",null,{"className":"text-sm text-muted-foreground","children":["© ",2025," 前端學習筆記. 版權所有."]}]}]]}]}]]}]}]]}]]}],{"children":["posts",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","React/useMemo-interview","c"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","k2n3qzayM6vTawVdG2fMv",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:T971b,<h1>useMemo 深入解析：面試必備指南</h1>
<h2>什麼是 useMemo？</h2>
<p><code>useMemo</code> 是 React 提供的一個 Hook，它的主要功能是在依賴項未改變的情況下，記住（memoize）計算結果，避免在每次渲染時重複執行昂貴的計算操作。</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<h2>核心概念</h2>
<h3>1. 記憶化（Memoization）原理</h3>
<p><code>useMemo</code> 實現了計算結果的緩存機制：</p>
<ul>
<li>首次渲染時，執行計算函數並存儲結果</li>
<li>後續渲染時，只有當依賴項改變才重新計算</li>
<li>不變時直接返回上次緩存的結果</li>
</ul>
<h3>2. 與 useCallback 的區別</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token comment">// useMemo 記憶計算結果</span>
</span><span class="code-line line-number" line="2"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4"><span class="token comment">// useCallback 記憶函數本身</span>
</span><span class="code-line line-number" line="5"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">  <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<ul>
<li><code>useMemo</code> 緩存計算結果（任何值）</li>
<li><code>useCallback</code> 緩存函數引用</li>
<li>在實現上，<code>useCallback(fn, deps)</code> 相當於 <code>useMemo(() => fn, deps)</code></li>
</ul>
<h2>高級使用場景</h2>
<h3>1. 避免昂貴計算</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">SearchResults</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> query<span class="token punctuation">,</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token comment">// 只有 query 或 data 改變時，才重新過濾</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">const</span> filteredResults <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">"Filtering data..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="5">    <span class="token keyword control-flow">return</span> data<span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span>
</span><span class="code-line line-number" line="6">      item<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span><span class="token method function property-access">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="7">    <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>query<span class="token punctuation">,</span> data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">
</span><span class="code-line line-number" line="10">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line line-number" line="11">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line line-number" line="12"><span class="token plain-text">      </span><span class="token punctuation">{</span>filteredResults<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
</span><span class="code-line line-number" line="13">        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token property-access">text</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="14">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line line-number" line="15"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="16">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="17"><span class="token punctuation">}</span>
</span></code></pre>
<h3>2. 避免子組件不必要的重新渲染</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ParentComponent</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value1<span class="token punctuation">,</span> value2 <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token comment">// 只有 value1 改變時才重新創建 complexObject</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">const</span> complexObject <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">      <span class="token literal-property property">prop1</span><span class="token operator">:</span> value1<span class="token punctuation">,</span>
</span><span class="code-line line-number" line="6">      <span class="token literal-property property">nested</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">prop2</span><span class="token operator">:</span> <span class="token string">"some value"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span><span class="code-line line-number" line="7">    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">
</span><span class="code-line line-number" line="10">  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">ChildComponent</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>complexObject<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="11"><span class="token punctuation">}</span>
</span></code></pre>
<h3>3. 突破 Referential Equality 的限制</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">DataGrid</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data<span class="token punctuation">,</span> columns <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token comment">// 避免每次渲染都創建新對象</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">const</span> processedColumns <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="4">    <span class="token keyword control-flow">return</span> columns<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">column</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
</span><span class="code-line line-number" line="5">      <span class="token spread operator">...</span>column<span class="token punctuation">,</span>
</span><span class="code-line line-number" line="6">      <span class="token literal-property property">width</span><span class="token operator">:</span> column<span class="token punctuation">.</span><span class="token property-access">width</span> <span class="token operator">||</span> <span class="token number">100</span><span class="token punctuation">,</span>
</span><span class="code-line line-number" line="7">      <span class="token literal-property property">sortable</span><span class="token operator">:</span> column<span class="token punctuation">.</span><span class="token property-access">sortable</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
</span><span class="code-line line-number" line="8">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="9">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>columns<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="10">
</span><span class="code-line line-number" line="11">  <span class="token keyword control-flow">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span><span class="token class-name">Grid</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span></span> <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>processedColumns<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="12"><span class="token punctuation">}</span>
</span></code></pre>
<h2>陷阱和優化策略</h2>
<h3>1. 過度優化問題</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token comment">// 不需要 useMemo 的情況</span>
</span><span class="code-line line-number" line="2"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 計算太簡單，useMemo 本身開銷更大</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4"><span class="token comment">// 需要 useMemo 的情況</span>
</span><span class="code-line line-number" line="5"><span class="token keyword">const</span> sortedItems <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">  <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span><span class="token spread operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>items<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<h3>2. 依賴項管理</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token comment">// 錯誤：漏掉依賴項</span>
</span><span class="code-line line-number" line="2"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 漏掉了 c</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4"><span class="token comment">// 正確：包含所有依賴項</span>
</span><span class="code-line line-number" line="5"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a <span class="token operator">*</span> b <span class="token operator">*</span> c<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre>
<h3>3. useMemo 不是萬能藥</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Component</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token comment">// 不要過度使用：不是所有計算都需要 useMemo</span>
</span><span class="code-line line-number" line="3">  <span class="token keyword">const</span> normalValue <span class="token operator">=</span> <span class="token function">calculateSimpleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 簡單計算不需要 useMemo</span>
</span><span class="code-line line-number" line="4">
</span><span class="code-line line-number" line="5">  <span class="token keyword">const</span> expensiveValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">    <span class="token keyword control-flow">return</span> <span class="token function">calculateVeryExpensiveValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">
</span><span class="code-line line-number" line="9">  <span class="token comment">// ...</span>
</span><span class="code-line line-number" line="10"><span class="token punctuation">}</span>
</span></code></pre>
<h2>原理剖析</h2>
<h3>1. Fiber 架構下的實現</h3>
<p>React 會在 Fiber 節點上維護一個「記憶化值」列表，每個 useMemo 對應一個條目，包含：</p>
<ul>
<li>上次依賴項的值</li>
<li>上次計算的結果</li>
<li>當前依賴項的值</li>
</ul>
<h3>2. 依賴比較機制</h3>
<p>React 使用 <code>Object.is</code> 算法比較依賴項：</p>
<ul>
<li>引用類型只比較引用地址，不比較內部屬性</li>
<li>這就是為什麼依賴對象或數組時要特別小心</li>
</ul>
<h2>面試常見問題與答案</h2>
<h3>基本問題</h3>
<p><strong>Q: useMemo 的主要作用是什麼？</strong></p>
<p>A: useMemo 主要用於優化性能，通過緩存計算結果，避免在組件重新渲染時重複執行昂貴的計算操作。</p>
<p><strong>Q: useMemo 和 useCallback 的區別？</strong></p>
<p>A: useMemo 緩存計算結果（可以是任何值），而 useCallback 專門用於緩存函數引用。實際上，useCallback(fn, deps) 相當於 useMemo(() => fn, deps)。</p>
<h3>進階問題</h3>
<p><strong>Q: 在什麼情況下應該使用 useMemo？</strong></p>
<p>A: 應該在以下情況使用 useMemo：</p>
<ol>
<li>執行昂貴的計算（如複雜數據處理、排序、過濾大數組等）</li>
<li>創建傳遞給子組件的複雜對象，避免不必要的重新渲染</li>
<li>依賴項變化不頻繁的計算</li>
</ol>
<p><strong>Q: useMemo 如何影響渲染性能？</strong></p>
<p>A: useMemo 通過避免重複計算和保持引用穩定性來提高性能：</p>
<ul>
<li>避免在每次渲染時執行昂貴計算</li>
<li>保持對象引用穩定，減少子組件的不必要渲染</li>
<li>但 useMemo 本身也有開銷，過度使用反而可能降低性能</li>
</ul>
<p><strong>Q: 如何判斷某個計算是否需要 useMemo 優化？</strong></p>
<p>A: 可以通過以下方法判斷：</p>
<ol>
<li>測量計算操作的執行時間</li>
<li>使用 React Profiler 分析渲染性能</li>
<li>考慮計算的複雜度和執行頻率</li>
<li>評估組件重新渲染的頻率和計算穩定性</li>
</ol>
<h3>專家級問題</h3>
<p><strong>Q: useMemo 有什麼限制或潛在問題？</strong></p>
<p>A: 主要限制和問題包括：</p>
<ol>
<li>不保證一定會緩存結果（React 可能出於內存考慮丟棄某些緩存）</li>
<li>依賴項管理難度大，容易遺漏或過度包含依賴</li>
<li>過度使用會增加代碼複雜度並可能引入新的性能問題</li>
<li>不適合有副作用的函數（應使用 useEffect）</li>
</ol>
<p><strong>Q: 解釋一下 useMemo 在 React Fiber 架構中的工作原理？</strong></p>
<p>A: 在 Fiber 架構中，useMemo 的工作原理：</p>
<ol>
<li>初次渲染時，React 執行 useMemo 的計算函數並將結果與依賴項一起存儲在 Fiber 節點</li>
<li>更新時，React 使用 Object.is 比較新舊依賴項</li>
<li>如果依賴項相同，復用之前的計算結果</li>
<li>如果依賴項變化，重新執行計算函數並更新存儲的結果</li>
<li>這個過程是 React 協調過程的一部分，發生在 render 階段</li>
</ol>
<p><strong>Q: 在自定義 Hook 中如何正確使用 useMemo？</strong></p>
<p>A: 在自定義 Hook 中正確使用 useMemo 的最佳實踐：</p>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function">useCustomData</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4">  <span class="token comment">// 在自定義 Hook 內部使用 useMemo</span>
</span><span class="code-line line-number" line="5">  <span class="token keyword">const</span> processedData <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="6">    <span class="token keyword control-flow">return</span> <span class="token function">expensiveProcess</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="7">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="8">
</span><span class="code-line line-number" line="9">  <span class="token comment">// 也可以將 memoization 的決定權交給使用者</span>
</span><span class="code-line line-number" line="10">  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="11">    data<span class="token punctuation">,</span>
</span><span class="code-line line-number" line="12">    processedData<span class="token punctuation">,</span>
</span><span class="code-line line-number" line="13">  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14"><span class="token punctuation">}</span>
</span><span class="code-line line-number" line="15">
</span><span class="code-line line-number" line="16"><span class="token comment">// 使用時</span>
</span><span class="code-line line-number" line="17"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Component</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> id <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="18">  <span class="token keyword">const</span> <span class="token punctuation">{</span> processedData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCustomData</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="19">  <span class="token comment">// processedData 已經被 memoize，不需要在此處再次使用 useMemo</span>
</span><span class="code-line line-number" line="20"><span class="token punctuation">}</span>
</span></code></pre>
<h2>實際績效測試案例</h2>
<h3>案例：大數據列表渲染優化</h3>
<pre class="language-jsx"><code class="language-jsx code-highlight"><span class="code-line line-number" line="1"><span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">DataList</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items<span class="token punctuation">,</span> filterText <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="2">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">time</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="3">
</span><span class="code-line line-number" line="4">  <span class="token comment">// 未優化版本</span>
</span><span class="code-line line-number" line="5">  <span class="token comment">// const filteredItems = items</span>
</span><span class="code-line line-number" line="6">  <span class="token comment">//   .filter(item => item.name.includes(filterText))</span>
</span><span class="code-line line-number" line="7">  <span class="token comment">//   .sort((a, b) => a.name.localeCompare(b.name));</span>
</span><span class="code-line line-number" line="8">
</span><span class="code-line line-number" line="9">  <span class="token comment">// 使用 useMemo 優化版本</span>
</span><span class="code-line line-number" line="10">  <span class="token keyword">const</span> filteredItems <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
</span><span class="code-line line-number" line="11">    <span class="token keyword control-flow">return</span> items
</span><span class="code-line line-number" line="12">      <span class="token punctuation">.</span><span class="token method function property-access">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> item<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>filterText<span class="token punctuation">)</span><span class="token punctuation">)</span>
</span><span class="code-line line-number" line="13">      <span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> a<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">.</span><span class="token method function property-access">localeCompare</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="14">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>items<span class="token punctuation">,</span> filterText<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="15">
</span><span class="code-line line-number" line="16">  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">timeEnd</span><span class="token punctuation">(</span><span class="token string">"filter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="17">
</span><span class="code-line line-number" line="18">  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
</span><span class="code-line line-number" line="19">    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>ul</span><span class="token punctuation">></span></span><span class="token plain-text">
</span></span><span class="code-line line-number" line="20"><span class="token plain-text">      </span><span class="token punctuation">{</span>filteredItems<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
</span><span class="code-line line-number" line="21">        <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token property-access">id</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>li</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="22">      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
</span></span><span class="code-line line-number" line="23"><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>ul</span><span class="token punctuation">></span></span>
</span><span class="code-line line-number" line="24">  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</span><span class="code-line line-number" line="25"><span class="token punctuation">}</span>
</span></code></pre>
<p>測試結果：</p>
<ul>
<li>未優化版本：每次輸入字符都需要 ~100ms 處理時間</li>
<li>使用 useMemo：僅在 items 或完整 filterText 改變時花費 ~100ms，其他時間幾乎為 0ms</li>
</ul>
<h2>總結</h2>
<p>掌握 useMemo 需要理解：</p>
<ol>
<li>基本使用方法和依賴項管理</li>
<li>合適的使用場景和優化策略</li>
<li>底層實現原理和性能影響</li>
<li>與其他 React 優化方法的結合使用</li>
</ol>
<p>靈活運用 useMemo 可以顯著提升 React 應用性能，但過度優化可能適得其反。關鍵是理解何時使用、如何正確使用，以及如何評估其效果。</p>7:["$","div",null,{"className":"container mx-auto py-8 px-4 md:px-6 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":["$","$L6",null,{"href":"/","className":"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50 h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left mr-2 h-4 w-4","aria-hidden":"true","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}]," 返回首頁"]}]}],["$","article",null,{"className":"prose dark:prose-invert max-w-none","children":[["$","h1",null,{"className":"text-3xl md:text-4xl font-bold mb-4","children":"useMemo 深入解析：面試必備指南"}],["$","div",null,{"className":"flex items-center gap-4 text-muted-foreground mb-8","children":[["$","div",null,{"className":"flex items-center gap-1","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","aria-hidden":"true","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"2025/5/1"}]]}],["$","div",null,{"className":"flex items-center gap-1","children":[["$","svg",null,{"ref":"$undefined","xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-4 w-4","aria-hidden":"true","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],["$","$L6",null,{"href":"/category/React","className":"hover:text-primary transition-colors capitalize","children":"React"}]]}]]}],["$","div",null,{"className":"leading-relaxed","children":["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$15"}}]}]]}]]}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","link","0",{"rel":"icon","href":"/blog-next/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
